# Fichier pour l'intégration continue des projets C++

# Image Docker à utiliser cppimage2
# cppimage2 contient build-essential, conan, ninja, gcovr

image: cppimage2

#pour l'inclusion des sous modules Git
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  
stages:
  - build
  # - test
  # - coverage
  - documentation
#  - check

#Job de compilation
job:build:
#  only:
#    - master
#    - tags
  stage: build
  #Si il y a des actions à lancer avant le script
  before_script:

  script:
    #execution de cmake
    - mkdir build && cd build
    - cmake -Bbuild -DCMAKE_BUILD_TYPE=Release "WarHammerV2"

 #Décommenter la ligne ci-dessous pour avoir le rapport de tests complet   
 #   - ctest test/testProjet --no-compress-output --output-on-failure --output-junit Test.xml
  #création de l'archive contenant le build téléchargeable
  artifacts:
  #  when: always
    paths:
      - build

# #Job pour les tests unitaires   
# job:test:
  # stage: test
  # script:
    # - cd build/test/bin
    # - ./testProjet --reporter junit --out catch_results.xml
  # artifacts:
    # when: always
    # paths:
    # - build/test/bin/catch_results.xml
    # reports:
      # junit: build/test/bin/catch_results.xml
          
# Job pour le coverage de l'application    
# run tests:
  # stage: coverage
  # before_script:

  # script:
    # - cd build
    # - conan install -s build_type=Debug -if conan-dependencies ..
    # - cmake -GNinja ..
    # - ninja
    # - ninja coverage
    # - gcovr --xml-pretty --exclude-unreachable-branches --exclude CMakeFiles --print-summary -o coverage.xml --root ${CI_PROJECT_DIR}
  # coverage: /^\s*lines:\s*\d+.\d+\%/
  # artifacts:
    # name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    # expire_in: 2 days
    # reports:
      # cobertura: build/coverage.xml
    # paths:
     # - build/coverage

job:documentation:
#Décommenter les lignes ci-dessous pour ne générer la documentation que pour les commits sur master et/ou les tags  
#  only:
#    - master
#    - tags
  stage: documentation
  before_script:
  script:
     - doxygen Doxyfile
     - mv html/ public/
  artifacts:
    paths:
      - public


##Job de check du code - inactif pour l'instant
#job:cpp-check:
#  stage: check
#  before_script:
#    - apt update && apt -y install cppcheck python3-pip
#    - python3 -m pip install -U cppcheck_codequality
  #lancement de cppcheck unitaires et génération du rapport json
#  script:
#    - mkdir -p $CI_COMMIT_REF_NAME
#    - cppcheck -j 4 --enable=all --inconclusive --force --xml --xml-version=2 . 2> cppcheck-result.xml
#    - cppcheck-htmlreport --file=cppcheck-result.xml --report-dir=$CI_COMMIT_REF_NAME --source-dir=.
#    - cppcheck-codequality --input-file=cppcheck-result.xml --output-file=cppcheck.json
#  artifacts:
#    paths: 
#      - $CI_COMMIT_REF_NAME
#    reports:
#      codequality: cppcheck.json

        
